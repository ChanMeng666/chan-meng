/**
 * ASCII Art Assets
 *
 * Visual elements for the CLI interface.
 * Hand-crafted ASCII art and decorative elements.
 */

// Welcome title (will be generated by figlet in display.js)
export const WELCOME_TITLE_FONT = 'Standard';

// Decorative elements
export const DECORATIONS = {
  minimalistLine: '─'.repeat(50),
  doubleLine: '═'.repeat(50),
  thinLine: '─'.repeat(30),

  bullet: '•',
  arrow: '→',
  checkmark: '✓',
  cross: '✗',

  // Icons (fallback to ASCII if emoji not supported)
  icons: {
    journey: { emoji: '🗺️', ascii: '[MAP]' },
    philosophy: { emoji: '💭', ascii: '[MIND]' },
    practical: { emoji: '✂️', ascii: '[CUT]' },
    connect: { emoji: '📧', ascii: '[MAIL]' },
    exit: { emoji: '👋', ascii: '[EXIT]' }
  }
};

// Simple foam mat illustration (used in Journey module)
export const FOAM_MAT = `
    ╔══════════════════════╗
    ║                      ║
    ║    [foam mat]        ║
    ║                      ║
    ║         ☀️            ║
    ║                      ║
    ╚══════════════════════╝
       "Following the sun"
`;

// Minimalist logo (simple text version)
export const MINIMAL_LOGO = `
    ┌─────────────────┐
    │  CHAN MENG      │
    │  极简生活        │
    └─────────────────┘
`;

// Progress indicators
export const PROGRESS = {
  empty: '○',
  filled: '●',
  current: '◉'
};

// Navigation hints
export const NAV_HINTS = {
  enter: '↵ Enter',
  arrows: '↑↓ Navigate',
  back: '← Back',
  quit: 'q Quit',
  menu: 'm Menu'
};

// Quotes for different moments
export const QUOTES = {
  welcome: [
    '"此时此刻没用，就应该扔掉"',
    '"If not useful now, discard it"',
    '',
    '— Chan Meng'
  ],

  quickTourEnd: [
    '"I do what serves me,',
    'regardless of your expectations."',
    '',
    '— Chan'
  ],

  fullExperienceEnd: [
    '"The deepest relationship',
    'is the one with yourself."',
    '',
    '— Chan'
  ],

  farewell: [
    'Thank you for exploring.',
    '',
    '此时此刻没用，就应该扔掉',
    'If not useful now, discard it.',
    '',
    'May you find your own path',
    'to intentional living.'
  ]
};

// Box borders for different styles
export const BOXES = {
  simple: {
    topLeft: '┌',
    topRight: '┐',
    bottomLeft: '└',
    bottomRight: '┘',
    horizontal: '─',
    vertical: '│'
  },

  double: {
    topLeft: '╔',
    topRight: '╗',
    bottomLeft: '╚',
    bottomRight: '╝',
    horizontal: '═',
    vertical: '║'
  },

  rounded: {
    topLeft: '╭',
    topRight: '╮',
    bottomLeft: '╰',
    bottomRight: '╯',
    horizontal: '─',
    vertical: '│'
  }
};

/**
 * Create a simple text box
 * @param {string} text - Text to display
 * @param {Object} style - Box style (from BOXES)
 * @returns {string} Formatted box
 */
export function createBox(text, style = BOXES.simple) {
  const lines = text.split('\n');
  const maxLength = Math.max(...lines.map(l => l.length));
  const width = maxLength + 4; // 2 spaces padding on each side

  const top = style.topLeft + style.horizontal.repeat(width - 2) + style.topRight;
  const bottom = style.bottomLeft + style.horizontal.repeat(width - 2) + style.bottomRight;

  const middle = lines.map(line => {
    const padding = ' '.repeat(maxLength - line.length);
    return `${style.vertical}  ${line}${padding}  ${style.vertical}`;
  }).join('\n');

  return `${top}\n${middle}\n${bottom}`;
}

/**
 * Get icon for module (emoji or ASCII fallback)
 * @param {string} moduleId - Module ID
 * @param {boolean} supportsEmoji - Whether terminal supports emoji
 * @returns {string} Icon string
 */
export function getModuleIcon(moduleId, supportsEmoji = true) {
  const icon = DECORATIONS.icons[moduleId];
  if (!icon) return '';
  return supportsEmoji ? icon.emoji : icon.ascii;
}
